# ============================================================================
# OpenSSL Configuration for Hybrid Certificates
# ============================================================================
#
# This configuration file is a standalone template for generating hybrid certificates
# that combine traditional and post-quantum cryptography algorithms.
#
# USAGE:
#   This file is intended for manual certificate generation with OpenSSL commands.
#   For automated certificate generation, use the scripts in the scripts/ directory.
#
# EXAMPLES:
#   # Generate a CA certificate with Dilithium3
#   openssl req -x509 -new -newkey dilithium3 -keyout ca.key -out ca.crt \
#       -config openssl-hybrid.conf -nodes -days 365 -extensions v3_ca
#
#   # Generate a server certificate with Falcon1024
#   openssl req -new -newkey falcon1024 -keyout server.key -out server.csr \
#       -config openssl-hybrid.conf -nodes
#   openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial \
#       -out server.crt -days 365 -extensions v3_req -extfile openssl-hybrid.conf
#
# RELATIONSHIP TO OTHER CONFIG FILES:
#   - This file is a standalone template for manual use
#   - The scripts/generate_certificates.sh script generates a similar config at
#     certs/config/cert.cnf for automated certificate generation
#   - The scripts/generate-test-certs.sh script creates inline configs for testing
#

[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
CN = quantum-safe-proxy.local
O = Quantum Safe Proxy
OU = Security
C = TW

[v3_req]
subjectAltName = @alt_names
keyUsage = keyEncipherment, digitalSignature
extendedKeyUsage = serverAuth, clientAuth
basicConstraints = CA:FALSE

[alt_names]
DNS.1 = quantum-safe-proxy.local
DNS.2 = localhost
IP.1 = 127.0.0.1

[v3_ca]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
